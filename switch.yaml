substitutions:
  name: "switch"
  friendly_name: "switch"

  relay_count: "3"

  toggle_relay_1_on_touch: "true"
  toggle_relay_2_on_touch: "true"
  toggle_relay_3_on_touch: "true"

  vibra_time: 50ms
  button_on_time: 50ms

  button_brightness: "0.7"
  button_color: "{0,0,100}"

  nightlight: "on"
  nightlight_brightness: "0.2"
  nightlight_color: "{80,70,0}"

  latitude: "40.799230°" 
  longitude: "-77.863870°"

  touch_brightness: "0"
  touch_color: "{0,100,0}"
  touch_effect: ""

  # long_press_brightness: "1"
  # long_press_color: "{100,0,0}"
  # long_press_effect: ""

  multi_touch_brightness: "1"
  multi_touch_color: "{100,100,100}"
  multi_touch_effect: ""

  swipe_left_brightness: "1"
  swipe_left_color: "{100,50,0}"
  swipe_left_effect: ""

  swipe_right_brightness: "1"
  swipe_right_color: "{100,50,0}"
  swipe_right_effect: ""

  relay_1_pin: GPIO18
  relay_2_pin: GPIO17
  relay_3_pin: GPIO27
  relay_4_pin: GPIO23

  # vibra_motor_pin: GPIO21
  pa_power_pin: GPIO26

  led_pin: GPIO13
  status_led_pin: GPIO33

  uart_tx_pin: GPIO19
  uart_rx_pin: GPIO22

  touchpanel_power_pin: GPIO5


esphome:
  name: bath-switch
  friendly_name: bath-switch
  project:
    name: smarthomeyourself.tx_ultimate
    version: "1.0"

  on_boot:
    priority: -100
    then:
      - binary_sensor.template.publish:
          id: touchfield_1
          state: OFF
      - binary_sensor.template.publish:
          id: touchfield_2
          state: OFF
      - binary_sensor.template.publish:
          id: touchfield_3
          state: OFF
      - binary_sensor.template.publish:
          id: multi_touch
          state: OFF
      - binary_sensor.template.publish:
          id: swipe_left
          state: OFF
      - binary_sensor.template.publish:
          id: swipe_right
          state: OFF
      - script.execute: refresh_led_default
      - script.execute: refresh_nightlight

esp32:
  board: esp32dev
  framework:
    type: arduino

logger:
#  hardware_uart: UART2
  level: DEBUG
  logs:
    binary_sensor: INFO
    light: INFO
    script: INFO
    switch: INFO
    tx_ultimate_touch: INFO
    uart_debug: INFO

api:
  encryption:
    key: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

ota:
  - platform: esphome
    password: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"


wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

    
improv_serial:

captive_portal:

external_components:
  - source:
      type: local
      path: my_components
    components: [tx_ultimate_touch]


globals:
  - id: leds_effect_active
    type: bool
    restore_value: no
    initial_value: 'false'

  - id: last_effect
    type: std::string
    # restore_value: yes
    initial_value: '"None"'


  - id: nightlight_color
    type: int [3]
    restore_value: no
    initial_value: ${nightlight_color}
  - id: button_color
    type: int [3]
    restore_value: no
    initial_value: ${button_color}
  - id: multi_touch_color
    type: int [3]
    restore_value: no
    initial_value: ${multi_touch_color}
  - id: swipe_left_color
    type: int [3]
    restore_value: no
    initial_value: ${swipe_left_color}
  - id: swipe_right_color
    type: int [3]
    restore_value: no
    initial_value: ${swipe_right_color}
  - id: touch_color
    type: int [3]
    restore_value: no
    initial_value: ${touch_color}    



binary_sensor:
  - platform: template
    name: "Touchfield 1"
    id: touchfield_1
    on_press:
      - if:
          condition:
            lambda: "return ${toggle_relay_1_on_touch};"
          then:
            - switch.toggle: relay_1
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: touchfield_1
          state: OFF
      - script.execute: refresh_led_default

  - platform: template
    name: "Touchfield 2"
    id: touchfield_2
    on_press:
      - if:
          condition:
            lambda: "return ${toggle_relay_2_on_touch};"
          then:
            - switch.toggle: relay_2
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: touchfield_2
          state: OFF
      - script.execute: refresh_led_default

  - platform: template
    name: "Touchfield 3"
    id: touchfield_3
    on_press:
      - if:
          condition:
            lambda: "return ${toggle_relay_3_on_touch};"
          then:
            - switch.toggle: relay_3
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: touchfield_3
          state: OFF
      - script.execute: refresh_led_default

  - platform: template
    name: "Swipe left"
    id: swipe_left
    on_press:
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: swipe_left
          state: OFF
      - script.execute: refresh_led_default

  - platform: template
    name: "Swipe right"
    id: swipe_right
    on_press:
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: swipe_right
          state: OFF
      - script.execute: refresh_led_default

  - platform: template
    name: "Multi Touch"
    id: multi_touch
    on_press:
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: multi_touch
          state: OFF
      - script.execute: refresh_led_default


switch:
  - platform: gpio
    id: relay_1
    name: "${friendly_name} L1"
    pin: ${relay_1_pin}
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      then:
        - script.execute: refresh_led_default
    on_turn_off:
      then:
        - script.execute: refresh_led_default

  - platform: gpio
    id: relay_2
    name: "${friendly_name} L2"
    pin: ${relay_2_pin}
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      then:
        - script.execute: refresh_led_default
    on_turn_off:
      then:
        - script.execute: refresh_led_default

  - platform: gpio
    id: relay_3
    name: "${friendly_name} L3"
    pin: ${relay_3_pin}
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      then:
        - script.execute: refresh_led_default
    on_turn_off:
      then:
        - script.execute: refresh_led_default

  # - platform: gpio
  #   id: vibra
  #   pin: ${vibra_motor_pin}
  #   name: "${friendly_name} Vibration"
  #   restore_mode: ALWAYS_OFF
  #   on_turn_on:
  #     - delay: ${vibra_time}
  #     - switch.turn_off: vibra

  - platform: gpio
    id: pa_power
    pin: ${pa_power_pin}
    name: "PA Power"
    internal: true
    restore_mode: ALWAYS_ON

  - platform: gpio
    name: "touch panel power"
    pin:
      number: ${touchpanel_power_pin}
      inverted: true
    id: touch_power
    internal: true
    restore_mode: RESTORE_DEFAULT_ON

  - platform: template
    name: "Nightlight"
    id: nightlight
    internal: true
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      then:
        - script.execute: refresh_led_default
    on_turn_off:
      then:
        - script.execute: refresh_led_default

  - platform: template
    name: "Nightlight"
    id: nightlight_active
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      then:
        - script.execute: refresh_led_default
    on_turn_off:
      then:
        - script.execute: refresh_led_default

  - platform: restart
    name: "${friendly_name} Restart"

light:
  - platform: neopixelbus
    type: GRB
    variant: WS2811
    pin: ${led_pin}
    num_leds: 28
    name: "NeoPixel Light"
    id: leds
    default_transition_length: 300ms
    effects:
      - addressable_rainbow:
          name: "Rainbow"
          speed: 3
          width: 240
      - pulse:
          name: "Pulse"
          transition_length: 1.4s
          update_interval: 1s

          
    on_turn_on:
      then:
        - globals.set:
            id: leds_effect_active
            value: 'true'
        - logger.log: "leds_effect_active true"
        - switch.turn_off:
            id: nightlight
        - switch.turn_off: nightlight
        - switch.turn_off: nightlight_active
        - script.execute: refresh_led_default

    on_turn_off:
      then:
        - globals.set:
            id: leds_effect_active
            value: 'false'
        - logger.log: "leds_effect_active false"
        - script.execute: refresh_led_default


  - platform: partition
    name: "LEDs Button right"
    id: leds_button_right
    internal: true
    segments:
      - id: leds
        from: 7
        to: 7
  - platform: partition
    name: "LEDs Button middle"
    id: leds_button_middle
    internal: true
    segments:
      - id: leds
        from: 9
        to: 9
  - platform: partition
    name: "LEDs Button left"
    id: leds_button_left
    internal: true
    segments:
      - id: leds
        from: 11
        to: 11

  - platform: partition
    name: "LEDs Nightlight"
    id: leds_nightlight
    internal: true
    segments:
      - id: leds
        from: 0
        to: 6
      - id: leds
        from: 8
        to: 8
      - id: leds
        from: 10
        to: 10
      - id: leds
        from: 12
        to: 19
      - id: leds
        from: 27
        to: 27
      - id: leds_top
        from: 0
        to: 6

  - platform: partition
    name: "LEDs Top"
    id: leds_top
    internal: true
    segments:
      - id: leds
        from: 20
        to: 26
    effects:
      - addressable_scan:
          name: "Scan"
      - addressable_rainbow:
          name: "Rainbow"
          speed: 10
          width: 20


uart:
  tx_pin: ${uart_tx_pin}
  rx_pin: ${uart_rx_pin}
  id: my_uart
  baud_rate: 115200
  data_bits: 8
  stop_bits: 1
  parity: NONE
  debug:
    direction: RX
    dummy_receiver: false
    after:
      timeout: 100ms
      bytes: 150
    sequence:
      - lambda: UARTDebug::log_hex(direction, bytes, ' ');


# interval:
#   - interval: 500ms
#     then:
#       - lambda: |-
#           static std::string last_effect;
#           std::string current = id(leds).get_effect_name();
#           if (current != last_effect) {
#             last_effect = current;
#             ESP_LOGI("leds", "Обнаружена смена эффекта: %s", current.c_str());
#             id(refresh_led_default).execute();
#           }







tx_ultimate_touch:
  id: tx_touch
  uart: my_uart

  on_press:
    # - script.execute: led_on_touch
    - lambda: >
        ESP_LOGD("tx_ultimate_touch.on_press", "Touch Position: %d / State: %d", touch.x, touch.state);

  on_release:
    - script.execute:
        id: handle_release
        pos: !lambda "return touch.x;"

    # - switch.turn_on: vibra
    - lambda: >
        ESP_LOGD("tx_ultimate_touch.on_release", "Release Position: %d / State: %d", touch.x, touch.state);

  on_swipe_left:
    # - script.execute: led_on_swipe_left
    # - switch.turn_on: vibra
    - binary_sensor.template.publish:
        id: swipe_left
        state: ON

    - lambda: >
        ESP_LOGD("tx_ultimate_touch.on_swipe_left", "Swipe Left Position: %d / State: %d", touch.x, touch.state);

  on_swipe_right:
    # - script.execute: led_on_swipe_right
    # - switch.turn_on: vibra
    - binary_sensor.template.publish:
        id: swipe_right
        state: ON

    - lambda: >
        ESP_LOGD("tx_ultimate_touch.on_swipe_right", "Swipe Right Position: %d / State: %d", touch.x, touch.state);


  on_full_touch_release:
  # - script.execute: led_on_full_touch
  - if:
      condition:
        or:
          - switch.is_on: relay_1
          - switch.is_on: relay_2
          - switch.is_on: relay_3
      then:
        # Если хотя бы одно реле включено → выключаем все
        - switch.turn_off: relay_1
        - switch.turn_off: relay_2
        - switch.turn_off: relay_3
      else:
        # Если все выключены → включаем все
        - switch.turn_on: relay_1
        - switch.turn_on: relay_2
        - switch.turn_on: relay_3
  - binary_sensor.template.publish:
      id: multi_touch
      state: ON
  - lambda: >
      ESP_LOGD("tx_ultimate_touch.on_full_touch_release", "Full Touch Release Position: %d / State: %d", touch.x, touch.state);

time:
  - platform: homeassistant
    id: homeassistant_time
  - platform: sntp
    id: sntp_time
    on_time:
      # Every 5 minutes
      - seconds: 0
        minutes: /5
        then:
          - script.execute: refresh_nightlight

sun:
  latitude: ${latitude}
  longitude: ${longitude}






script:
  - id: refresh_nightlight
    mode: restart
    then:
      - if:
          condition:
            lambda: 'return "${nightlight}" == "on";'
          then:
            - if:
                condition:
                  - sun.is_below_horizon:
                then:
                  - globals.set:
                      id: leds_effect_active
                      value: 'false'
                  - lambda: |
                      id(leds).turn_on().set_effect("None").perform();
                  - switch.turn_on:
                      id: nightlight
                  - switch.turn_on: nightlight_active
                  - script.execute: refresh_led_default
                else:
                  - switch.turn_off:
                      id: nightlight



  - id: refresh_led_default
    mode: restart
    then:
      - if:
          condition:
            lambda: "return !id(leds_effect_active);"
          then:
            # Левый переключатель (Relay 1)
            - if:
                condition:
                  lambda: |
                    if (id(nightlight).state || id(nightlight_active).state) {
                    return false;
                    } else {
                      return (${relay_count}>1 && id(relay_1).state) ;
                    }
                then:
                  - script.execute: led_on_button_left
                else:
                  - script.execute: led_off_button_left

            # Средний переключатель (Relay 2)
            - if:
                condition:
                  lambda: |
                    if (id(nightlight).state || id(nightlight_active).state) {
                    return false;
                    } else {
                      return (${relay_count}==3 && id(relay_2).state) || (${relay_count}==1 && id(relay_1).state);
                    }
                then:
                  - script.execute: led_on_button_middle
                else:
                  - script.execute: led_off_button_middle

            # Правый переключатель (Relay 3)
            - if:
                condition:
                  lambda: |
                    if (id(nightlight).state || id(nightlight_active).state) {
                    return false;
                    } else {
                      return (${relay_count}==3 && id(relay_3).state) || (${relay_count}==2 && id(relay_2).state);
                    }
                then:
                  - script.execute: led_on_button_right
                else:
                  - script.execute: led_off_button_right

            - if:
                condition:
                  lambda: "return id(nightlight).state || id(nightlight_active).state;"
                then:
                  - script.execute: led_on_nightlight
                else:
                  - light.turn_off: leds_nightlight





  - id: led_on_button_left
    mode: restart
    then:
      - light.turn_on:
          id: leds_button_left
          brightness: ${button_brightness}
          red: !lambda "return id(button_color)[0]/100.0;"
          green: !lambda "return id(button_color)[1]/100.0;"
          blue:  !lambda "return id(button_color)[2]/100.0;"
      - logger.log: "ON подсветку левой клавиши"

  - id: led_on_button_middle
    mode: restart
    then:
      - light.turn_on:
          id: leds_button_middle
          brightness: ${button_brightness}
          red: !lambda "return id(button_color)[0]/100.0;"
          green: !lambda "return id(button_color)[1]/100.0;"
          blue:  !lambda "return id(button_color)[2]/100.0;"

  - id: led_on_button_right
    mode: restart
    then:
      - light.turn_on:
          id: leds_button_right
          brightness: ${button_brightness}
          red: !lambda "return id(button_color)[0]/100.0;"
          green: !lambda "return id(button_color)[1]/100.0;"
          blue:  !lambda "return id(button_color)[2]/100.0;"


  - id: led_off_button_left
    mode: restart
    then:
      - if:
          condition:
            lambda: "return id(nightlight).state || id(nightlight_active).state;"
          then:
            - light.turn_on:
                id: leds_button_left
                brightness: ${nightlight_brightness}
                red: !lambda "return id(nightlight_color)[0]/100.0;"
                green: !lambda "return id(nightlight_color)[1]/100.0;"
                blue:  !lambda "return id(nightlight_color)[2]/100.0;"
          else:
            - logger.log: "OFF подсветку левой клавиши"
            - light.turn_off:
                id: leds_button_left

  - id: led_off_button_middle
    mode: restart
    then:
      - if:
          condition:
            lambda: "return id(nightlight).state || id(nightlight_active).state;"
          then:
            - light.turn_on:
                id: leds_button_middle
                brightness: ${nightlight_brightness}
                red: !lambda "return id(nightlight_color)[0]/100.0;"
                green: !lambda "return id(nightlight_color)[1]/100.0;"
                blue:  !lambda "return id(nightlight_color)[2]/100.0;"
          else:
            - light.turn_off:
                id: leds_button_middle


  - id: led_off_button_right
    mode: restart
    then:
      - if:
          condition:
            lambda: "return id(nightlight).state || id(nightlight_active).state;"
          then:
            - light.turn_on:
                id: leds_button_right
                brightness: ${nightlight_brightness}
                red: !lambda "return id(nightlight_color)[0]/100.0;"
                green: !lambda "return id(nightlight_color)[1]/100.0;"
                blue:  !lambda "return id(nightlight_color)[2]/100.0;"
          else:
            - light.turn_off:
                id: leds_button_right


  - id: led_on_nightlight
    mode: restart
    then:
      - light.turn_on:
          id: leds_nightlight
          brightness: ${nightlight_brightness}
          red: !lambda "return id(nightlight_color)[0]/100.0;"
          green: !lambda "return id(nightlight_color)[1]/100.0;"
          blue:  !lambda "return id(nightlight_color)[2]/100.0;"
      - logger.log: "ON ночную подсветку"



  - id: handle_release
    mode: restart
    parameters:
      pos: int
    then:
      - if:
          condition:
            lambda: "return ${relay_count}==1;"
          then:
            - binary_sensor.template.publish:
                id: touchfield_1
                state: ON

      - if:
          condition:
            lambda: "return ${relay_count}==2;"
          then:
            - if:
                condition:
                  lambda: "return pos <= 5;"
                then:
                  - binary_sensor.template.publish:
                      id: touchfield_1
                      state: ON

                else:
                  - binary_sensor.template.publish:
                      id: touchfield_2
                      state: ON

      - if:
          condition:
            lambda: "return ${relay_count}==3;"
          then:
            - if:
                condition:
                  lambda: "return pos <= 3;"
                then:
                  - binary_sensor.template.publish:
                      id: touchfield_1
                      state: ON

                else:
                  - if:
                      condition:
                        lambda: "return pos <= 7;"
                      then:
                        - binary_sensor.template.publish:
                            id: touchfield_2
                            state: ON

                      else:
                        - binary_sensor.template.publish:
                            id: touchfield_3
                            state: ON
